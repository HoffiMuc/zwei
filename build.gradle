buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
	}
	repositories {
		mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.bmuschko:gradle-docker-plugin:4.2.0"
 	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-spring-boot-application'

ext {
    versionBase = '0.1.2'
    springCloudVersion = 'Greenwich.RC1'
    dockerhubUser = 'dhoffi' + '/'
}

group = 'com.example'
version = versionBase+'.SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
    jcenter()
	maven { url "https://repo.spring.io/milestone" }
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor" // for @ConfigurationProperties, make sure compileJava.dependsOn(processResources)

    implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'
    implementation 'org.springframework.amqp:spring-rabbit'

	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.cloud:spring-cloud-stream-test-support') // messaging test support for spring-cloud-stream
	testImplementation('org.springframework.security:spring-security-test')
}

docker {
    springBootApplication {
        baseImage = 'openjdk:8-alpine'
        ports = [8080]
        tag = project.ext.dockerhubUser + 'funke' + project.name +':' + project.versionBase
        registryCredentials {
            url = 'https://index.docker.io/v1/'
            username = project.ext.dockerhubUser
            password = System.env.DOCKERHUB_PASS
        }
    }
}

task checkDockerhubPass(group:project.group, description:"check if DOCKERHUB_PASS is set in environment") {
    doLast {
        if ((System.env.DOCKERHUB_PASS == null) || (System.env.DOCKERHUB_PASS == "")) {
            throw new GradleException('for accessing hub.docker.com you need to set system env variable DOCKERHUB_PASS')
        }
    }
}
dockerPushImage.dependsOn(checkDockerhubPass)

task printDockerRunCmds(group:project.group, description:"print docker run commands to console") {
    doLast {
        def dockerRunCmdsString = """
docker network create mynetwork

# RabbitMQ
docker run -d -p 5672:5672 -p 15672:15672 --network mynetwork --hostname my-rabbit --name some-rabbit rabbitmq:3.7.8-management-alpine

# ${project.name}
docker run -d -p 8082:8080                --network mynetwork --hostname eins      --name funke-${project.name} ${project.dockerhubUser}funke${project.name}:${project.versionBase}

"""
        println dockerRunCmdsString
    }
}

dependencyManagement {
	imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

bootJar {
    launchScript() // make the fat.jar executable (e.g. for sudo ln -s /var/myapp/myapp.jar /etc/init.d/myapp)
}

